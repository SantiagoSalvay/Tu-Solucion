#!/usr/bin/env python
"""
Script para cargar datos de provincias y barrios de C√≥rdoba
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tu_solucion.settings')
django.setup()

from catering.models import Provincia, Barrio

def cargar_provincias():
    """Cargar provincias de Argentina"""
    provincias_data = [
        {'nombre': 'C√≥rdoba', 'codigo': 'COR'},
        {'nombre': 'Buenos Aires', 'codigo': 'BA'},
        {'nombre': 'Santa Fe', 'codigo': 'SF'},
        {'nombre': 'Mendoza', 'codigo': 'MEN'},
        {'nombre': 'Tucum√°n', 'codigo': 'TUC'},
        {'nombre': 'Salta', 'codigo': 'SAL'},
        {'nombre': 'Entre R√≠os', 'codigo': 'ER'},
        {'nombre': 'Misiones', 'codigo': 'MIS'},
        {'nombre': 'Corrientes', 'codigo': 'CORR'},
        {'nombre': 'Chaco', 'codigo': 'CHA'},
        {'nombre': 'Santiago del Estero', 'codigo': 'SDE'},
        {'nombre': 'San Juan', 'codigo': 'SJ'},
        {'nombre': 'Jujuy', 'codigo': 'JUJ'},
        {'nombre': 'R√≠o Negro', 'codigo': 'RN'},
        {'nombre': 'Formosa', 'codigo': 'FOR'},
        {'nombre': 'Neuqu√©n', 'codigo': 'NEU'},
        {'nombre': 'Chubut', 'codigo': 'CHU'},
        {'nombre': 'San Luis', 'codigo': 'SL'},
        {'nombre': 'Catamarca', 'codigo': 'CAT'},
        {'nombre': 'La Rioja', 'codigo': 'LR'},
        {'nombre': 'La Pampa', 'codigo': 'LP'},
        {'nombre': 'Santa Cruz', 'codigo': 'SC'},
        {'nombre': 'Tierra del Fuego', 'codigo': 'TF'},
    ]
    
    for provincia_data in provincias_data:
        try:
            provincia, created = Provincia.objects.get_or_create(
                codigo=provincia_data['codigo'],
                defaults={
                    'nombre': provincia_data['nombre'],
                    'activa': True
                }
            )
            if created:
                print(f"‚úÖ Provincia creada: {provincia.nombre}")
            else:
                print(f"‚ÑπÔ∏è  Provincia ya existe: {provincia.nombre}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Error con provincia {provincia_data['nombre']}: {e}")
            # Intentar crear solo por nombre si falla por c√≥digo
            try:
                provincia, created = Provincia.objects.get_or_create(
                    nombre=provincia_data['nombre'],
                    defaults={
                        'codigo': provincia_data['codigo'],
                        'activa': True
                    }
                )
                if created:
                    print(f"‚úÖ Provincia creada (por nombre): {provincia.nombre}")
                else:
                    print(f"‚ÑπÔ∏è  Provincia ya existe (por nombre): {provincia.nombre}")
            except Exception as e2:
                print(f"‚ùå Error definitivo con provincia {provincia_data['nombre']}: {e2}")

def cargar_barrios_cordoba():
    """Cargar barrios de C√≥rdoba Capital"""
    try:
        provincia_cordoba = Provincia.objects.get(codigo='COR')
    except Provincia.DoesNotExist:
        print("‚ùå Error: Provincia C√≥rdoba no encontrada")
        return
    
    barrios_data = [
        'Centro', 'Nueva C√≥rdoba', 'G√ºemes', 'San Mart√≠n', 'Alberdi',
        'Villa Allende', 'Villa Belgrano', 'Villa Carlos Paz', 'Villa Dolores',
        'Villa General Belgrano', 'Villa Mar√≠a', 'Villa Mercedes',
        'Alta C√≥rdoba', 'Barrio Jard√≠n', 'Barrio Norte', 'Barrio Sur',
        'Cofico', 'Col√≥n', 'C√≥rdoba', 'Cruz del Eje', 'General Paz',
        'Jard√≠n', 'La Calera', 'La Falda', 'La Plata', 'Los Boulevares',
        'Maldonado', 'Mariquita S√°nchez', 'Mercado Norte', 'Mercado Sur',
        'Nueva Esperanza', 'Nueva Italia', 'Observatorio', 'Paso de los Libres',
        'Pilar', 'Pueyrred√≥n', 'Residencial San Mart√≠n', 'R√≠o Cuarto',
        'R√≠o Segundo', 'San Antonio', 'San Fernando', 'San Francisco',
        'San Isidro', 'San Jer√≥nimo', 'San Jos√©', 'San Mart√≠n',
        'San Nicol√°s', 'San Pedro', 'San Rafael', 'San Roque',
        'San Vicente', 'Santa Ana', 'Santa Fe', 'Santa Isabel',
        'Santa Luc√≠a', 'Santa Mar√≠a', 'Santa Rosa', 'Sarmiento',
        'Sierras de C√≥rdoba', 'Tablada', 'Tiro Federal', 'Villa Azalais',
        'Villa Bustos', 'Villa C√°rcano', 'Villa Clodomiro', 'Villa del Totoral',
        'Villa El Libertador', 'Villa Elisa', 'Villa Esqui√∫', 'Villa Fontana',
        'Villa Libertador San Mart√≠n', 'Villa Mar√≠a', 'Villa Mercedes',
        'Villa Mitre', 'Villa Nueva', 'Villa Parque', 'Villa Quilino',
        'Villa Rivera Indarte', 'Villa San Antonio', 'Villa San Mart√≠n',
        'Villa Santa Isabel', 'Villa Santa Rosa', 'Villa Taninga',
        'Villa Tulumba', 'Villa Valeria', 'Villa Yacanto', 'Yapey√∫'
    ]
    
    for barrio_nombre in barrios_data:
        barrio, created = Barrio.objects.get_or_create(
            nombre=barrio_nombre,
            provincia=provincia_cordoba,
            defaults={
                'activo': True
            }
        )
        if created:
            print(f"‚úÖ Barrio creado: {barrio.nombre}, {barrio.provincia.nombre}")
        else:
            print(f"‚ÑπÔ∏è  Barrio ya existe: {barrio.nombre}, {barrio.provincia.nombre}")

def cargar_barrios_buenos_aires():
    """Cargar algunos barrios de Buenos Aires"""
    try:
        provincia_ba = Provincia.objects.get(codigo='BA')
    except Provincia.DoesNotExist:
        print("‚ùå Error: Provincia Buenos Aires no encontrada")
        return
    
    barrios_data = [
        'Capital Federal', 'La Plata', 'Mar del Plata', 'Bah√≠a Blanca',
        'Tandil', 'Olavarr√≠a', 'Necochea', 'Jun√≠n', 'Azul', 'Pergamino',
        'Chivilcoy', 'Mercedes', 'Luj√°n', 'San Nicol√°s', 'Z√°rate',
        'Campana', 'Escobar', 'Pilar', 'Tigre', 'San Isidro',
        'Vicente L√≥pez', 'San Mart√≠n', 'Tres de Febrero', 'Hurlingham',
        'Ituzaing√≥', 'Mor√≥n', 'La Matanza', 'Lomas de Zamora',
        'Avellaneda', 'Lan√∫s', 'Quilmes', 'Berazategui', 'Florencio Varela'
    ]
    
    for barrio_nombre in barrios_data:
        barrio, created = Barrio.objects.get_or_create(
            nombre=barrio_nombre,
            provincia=provincia_ba,
            defaults={
                'activo': True
            }
        )
        if created:
            print(f"‚úÖ Barrio creado: {barrio.nombre}, {barrio.provincia.nombre}")
        else:
            print(f"‚ÑπÔ∏è  Barrio ya existe: {barrio.nombre}, {barrio.provincia.nombre}")

def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando carga de provincias y barrios...")
    print("=" * 50)
    
    print("\nüìç Cargando provincias...")
    cargar_provincias()
    
    print("\nüèòÔ∏è  Cargando barrios de C√≥rdoba...")
    cargar_barrios_cordoba()
    
    print("\nüèòÔ∏è  Cargando barrios de Buenos Aires...")
    cargar_barrios_buenos_aires()
    
    print("\n" + "=" * 50)
    print("‚úÖ Carga completada!")
    
    # Mostrar estad√≠sticas
    total_provincias = Provincia.objects.count()
    total_barrios = Barrio.objects.count()
    print(f"üìä Total de provincias: {total_provincias}")
    print(f"üìä Total de barrios: {total_barrios}")

if __name__ == '__main__':
    main()
