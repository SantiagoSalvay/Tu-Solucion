# Django Stubs for Pylance - Place this file in your project root
from typing import Any, Optional, Union, List, Tuple, Dict

# Django Model base class
class Model:
    def save(self, *args: Any, **kwargs: Any) -> None: ...
    def delete(self, *args: Any, **kwargs: Any) -> Tuple[int, dict]: ...
    def refresh_from_db(self, using: Optional[str] = None, instance: Optional['Model'] = None) -> None: ...
    
    # Django automatically generates these methods for choice fields
    def get_FOO_display(self) -> str: ...  # Generic method for any choice field

# Django Field classes
class CharField:
    pass

class IntegerField:
    pass

class DecimalField:
    pass

class DateField:
    pass

class DateTimeField:
    pass

class BooleanField:
    pass

class EmailField:
    pass

class TextField:
    pass

class ForeignKey:
    pass

class OneToOneField:
    pass

class ManyToManyField:
    pass

class AutoField:
    pass

class PositiveIntegerField:
    pass

# Django QuerySet
class QuerySet:
    def filter(self, *args: Any, **kwargs: Any) -> 'QuerySet': ...
    def exclude(self, *args: Any, **kwargs: Any) -> 'QuerySet': ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def all(self) -> 'QuerySet': ...
    def count(self) -> int: ...
    def exists(self) -> bool: ...
    def first(self) -> Optional[Any]: ...
    def last(self) -> Optional[Any]: ...
    def order_by(self, *args: Any) -> 'QuerySet': ...
    def select_related(self, *args: Any) -> 'QuerySet': ...
    def prefetch_related(self, *args: Any) -> 'QuerySet': ...

# Django Manager
class Manager:
    def get_queryset(self) -> QuerySet: ...
    def all(self) -> QuerySet: ...
    def filter(self, *args: Any, **kwargs: Any) -> QuerySet: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, **kwargs: Any) -> Any: ...
    def get_or_create(self, defaults: Optional[Dict[str, Any]] = None, **kwargs: Any) -> Tuple[Any, bool]: ...

# Common Django model methods that are automatically generated
def __str__(self) -> str: ...
def __repr__(self) -> str: ...
def __eq__(self, other: Any) -> bool: ...
def __hash__(self) -> int: ...

# Django forms
class Form:
    def is_valid(self) -> bool: ...
    def cleaned_data(self) -> Dict[str, Any]: ...
    def save(self, commit: bool = True) -> Any: ...

class ModelForm(Form):
    pass

# Django views
def login_required(view_func: Any) -> Any: ...
def get_object_or_404(klass: Any, *args: Any, **kwargs: Any) -> Any: ...

# Django messages
def messages(request: Any, level: Any, message: str) -> None: ...

# Django shortcuts
def redirect(to: Any, *args: Any, **kwargs: Any) -> Any: ...
def render(request: Any, template_name: str, context: Optional[Dict[str, Any]] = None) -> Any: ...

# Django timezone
def timezone() -> Any: ...
